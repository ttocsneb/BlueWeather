"""
Django settings for blueweather project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import logging.config
import os

import importlib

from .config import Config
from .plugins import Plugins
from .plugins.utils import find_members

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING_CONFIG = None
logging.config.dictConfig({
    'version': 1,
    'formatters': {
        'brief': {
            'format': '%(levelname)-5.5s [%(asctime)s - %(name)s] %(message)s',
            'datefmt': '%I:%M:%S %p'
        },
        'default': {
            'format': '%(levelname)-5.5s [%(asctime)s - %(name)s] %(message)s',
            'datefmt': '%m/%d/%Y %I:%M:%S %p'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'brief',
            'level': 'INFO',
            'stream': 'ext://sys.stdout'
        }
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console']
    },
    #  'incremental': True
})

# Configuration are user-defined settings. They are all stored in the CONFIG
# object, and follow a different convention from Settings to differentiate them
CONFIG = Config(os.path.join(BASE_DIR, "config.yml"))
CONFIG.load()

# because django is set to reload, two instances of extensions will always be
# loaded. to stop this, use 'manage.py runserver --noreload'
PLUGINS = Plugins(CONFIG)
if CONFIG.modified:
    CONFIG.save()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

SECRET_KEY = CONFIG.web.secret_key
DEBUG = CONFIG.web.debug
ALLOWED_HOSTS = CONFIG.web.allowed_hosts

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blueweather.plugins',
    'blueweather.accounts',
    'blueweather.config',
    CONFIG.web.frontend
]

INSTALLED_APPS.extend(
    CONFIG.plugins.enabled
)

# A list of apps that should be linked in the sidebar
SIDEBAR = CONFIG.web.sidebar

MODEL_SETTINGS = [
    'blueweather.apps.api.model_loaders.model_settings'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'htmlmin.middleware.HtmlMinifyMiddleware',
    'htmlmin.middleware.MarkRequestMiddleware'
]

ROOT_URLCONF = 'blueweather.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [
            os.path.join(BASE_DIR, "templates")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            "environment": "blueweather.jinja2.environment",
            "context_processors": [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ]
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blueweather.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': CONFIG.web.database.get_data(BASE_DIR)
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = CONFIG.web.time_zone

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = "static"

STATICFILES_DIRS = []

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
]

STATIC_URL = '/static/'


# Load the frontend settings


def load_member(name: str, member):
    # Apply the setting
    members = globals()
    if name not in members:
        members[name] = member
        return
    # join the setting with the existing setting
    m = members[name]
    if isinstance(m, dict) and isinstance(member, dict):
        m.update(member)
    elif isinstance(m, str) and isinstance(member, str):
        members[name] = member
    elif isinstance(m, list) and isinstance(member, str):
        m.extend(member)
    else:
        members[name] = member


settings_module = importlib.import_module(
    '.settings',
    package=CONFIG.web.frontend
)

for name, member in find_members(settings_module):
    if name.upper() == name:
        load_member(name, member)
